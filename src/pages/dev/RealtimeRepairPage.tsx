import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Textarea } from '@/components/ui/textarea';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Checkbox } from '@/components/ui/checkbox';
import { Copy, ExternalLink, Play, Wifi, AlertCircle, CheckCircle, Database, RotateCcw } from 'lucide-react';
import { useNavigate } from 'react-router-dom';
import { runRealtimeDualSmoke, type RealtimeDualResult } from '@/utils/realtimeDualSmoke';
import { supabase } from '@/integrations/supabase/client';
import { useSupabaseAuth } from '@/hooks/useSupabaseAuth';
import { useToast } from '@/hooks/use-toast';

const DEFAULT_SQL = `-- =============================================
-- Realtime Reset / Hard Repair (Supabase)
-- Seguro de ejecutar en tu proyecto actual
-- =============================================

-- 1) Crear tabla de diagnóstico (idempotente)
create table if not exists public.realtime_diag (
  id bigint generated by default as identity primary key,
  test_id text,
  created_at timestamptz default now()
);

-- 2) Asegurar REPLICA IDENTITY FULL (requerido por realtime)
alter table if exists public.realtime_diag replica identity full;

-- 3) Crear publicación realtime si no existe
create publication if not exists supabase_realtime;

-- 4) Incluir la tabla en la publicación
alter publication supabase_realtime add table public.realtime_diag;

-- 5) Habilitar RLS y crear política permisiva para diagnósticos
alter table public.realtime_diag enable row level security;

-- Crear política permisiva para pruebas (ajustar en producción)
create policy if not exists "diag insert/select" 
  on public.realtime_diag 
  for all using (true);

-- 6) Asegurar permisos básicos
grant usage on schema public to authenticated;
grant all on public.realtime_diag to authenticated;

-- 7) Verificación rápida - debe mostrar la tabla realtime_diag
select pubname, schemaname, tablename
from pg_publication_tables
where pubname = 'supabase_realtime' and tablename = 'realtime_diag'
order by schemaname, tablename;`;

export default function RealtimeRepairPage() {
  const [sqlContent, setSqlContent] = useState(DEFAULT_SQL);
  const [testResult, setTestResult] = useState<RealtimeDualResult | null>(null);
  const [isRunningTest, setIsRunningTest] = useState(false);
  const [isApplying, setIsApplying] = useState(false);
  const [testLogs, setTestLogs] = useState<string[]>([]);
  const navigate = useNavigate();
  const { toast } = useToast();
  const { isAuthenticated } = useSupabaseAuth();

  const addLog = (message: string) => {
    const timestamp = new Date().toLocaleTimeString();
    setTestLogs(prev => [...prev.slice(-19), `[${timestamp}] ${message}`]);
  };

  const runDualSmokeTest = async () => {
    if (!isAuthenticated) {
      toast({
        title: "Authentication required",
        description: "Please authenticate first to run realtime tests",
        variant: "destructive"
      });
      return;
    }

    setIsRunningTest(true);
    addLog('Starting dual smoke test...');
    
    try {
      const result = await runRealtimeDualSmoke(supabase);
      setTestResult(result);
      
      if (result.ok) {
        addLog(`✅ Test PASSED via ${result.path}`);
        toast({
          title: "Realtime Test Passed",
          description: `Working via ${result.path}`,
        });
      } else {
        addLog(`❌ Test FAILED on ${result.path}: ${result.details || result.error}`);
        toast({
          title: "Realtime Test Failed", 
          description: result.details || result.error || "Unknown error",
          variant: "destructive"
        });
      }
    } catch (error) {
      addLog(`❌ Test error: ${error}`);
      toast({
        title: "Test Error",
        description: error instanceof Error ? error.message : "Unknown error",
        variant: "destructive"
      });
    } finally {
      setIsRunningTest(false);
    }
  };

  const copySQL = async () => {
    try {
      await navigator.clipboard.writeText(sqlContent);
      toast({
        title: "Copied to clipboard",
        description: "SQL script copied successfully"
      });
    } catch (error) {
      toast({
        title: "Copy failed",
        description: "Could not copy to clipboard",
        variant: "destructive"
      });
    }
  };

  const openSQLEditor = () => {
    const projectId = 'rxufqnsliggxavpfckft';
    window.open(`https://supabase.com/dashboard/project/${projectId}/sql/new`, '_blank');
  };

  const markAppliedAndRerun = async () => {
    setIsApplying(true);
    addLog('SQL marked as applied. Running dual smoke test...');
    
    try {
      // Save audit timestamp and dispatch global refresh event
      localStorage.setItem('realtimeRepairAppliedAt', new Date().toISOString());
      window.dispatchEvent?.(new CustomEvent('realtime:status-check'));

      // Execute the Dual Smoke Test on this same page
      await runDualSmokeTest(); // reuses the function already defined above

      addLog('Dual smoke test finished.');
    } catch (err) {
      addLog(`❌ Re-run error: ${err instanceof Error ? err.message : String(err)}`);
    } finally {
      setIsApplying(false);
    }
  };

  const getTestBadge = () => {
    if (!testResult) return null;
    
    if (testResult.ok) {
      return (
        <Badge variant="default" className="flex items-center gap-1">
          <CheckCircle className="h-3 w-3" />
          Realtime OK · {testResult.path}
        </Badge>
      );
    } else {
      return (
        <Badge variant="destructive" className="flex items-center gap-1">
          <AlertCircle className="h-3 w-3" />
          Realtime FAIL
        </Badge>
      );
    }
  };

  const getStepBadge = (status: 'PASS' | 'FAIL') => {
    if (status === 'PASS') {
      return (
        <Badge variant="default" className="flex items-center gap-1 text-xs">
          <CheckCircle className="h-3 w-3" />
          PASS
        </Badge>
      );
    } else {
      return (
        <Badge variant="destructive" className="flex items-center gap-1 text-xs">
          <AlertCircle className="h-3 w-3" />
          FAIL
        </Badge>
      );
    }
  };

  const runSQLFixAgain = async () => {
    setIsApplying(true);
    addLog('Running SQL fix again...');
    
    try {
      // Save timestamp and dispatch refresh
      localStorage.setItem('realtimeRepairAppliedAt', new Date().toISOString());
      window.dispatchEvent?.(new CustomEvent('realtime:status-check'));

      // Wait a moment for potential schema changes to propagate
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Run the dual smoke test
      await runDualSmokeTest();
      
      addLog('SQL fix and validation completed.');
    } catch (err) {
      addLog(`❌ SQL fix error: ${err instanceof Error ? err.message : String(err)}`);
    } finally {
      setIsApplying(false);
    }
  };

  // Run initial test on mount
  useEffect(() => {
    if (isAuthenticated) {
      runDualSmokeTest();
    }
  }, [isAuthenticated]);

  return (
    <div className="container mx-auto p-6 space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold">Realtime Repair</h1>
          <p className="text-muted-foreground">Fix realtime configuration issues with SQL repair script</p>
        </div>
        <div className="flex items-center gap-2">
          {getTestBadge()}
        </div>
      </div>

      <div className="grid gap-6 md:grid-cols-2">
        {/* Reset Realtime SQL Panel */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Database className="h-5 w-5" />
              Reset Realtime (SQL)
            </CardTitle>
            <CardDescription>
              Execute this SQL script in Supabase SQL Editor to repair realtime configuration
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <Alert>
              <AlertCircle className="h-4 w-4" />
              <AlertDescription>
                Ejecuta este script en el SQL Editor de Supabase. Vuelve aquí y presiona 'Re-run' para validar.
              </AlertDescription>
            </Alert>

            <div className="space-y-2">
              <Textarea
                value={sqlContent}
                onChange={(e) => setSqlContent(e.target.value)}
                className="font-mono text-sm min-h-[300px]"
                placeholder="SQL repair script..."
              />
            </div>

            <div className="flex flex-wrap gap-2">
              <Button variant="outline" size="sm" onClick={copySQL}>
                <Copy className="h-4 w-4 mr-2" />
                Copy SQL
              </Button>
              <Button variant="outline" size="sm" onClick={openSQLEditor}>
                <ExternalLink className="h-4 w-4 mr-2" />
                Abrir SQL Editor
              </Button>
              <Button 
                size="sm" 
                onClick={markAppliedAndRerun}
                disabled={isRunningTest || isApplying}
              >
                <Play className="h-4 w-4 mr-2" />
                {isApplying ? 'Re-running…' : 'Marcar como aplicado & Re-run Diagnostics'}
              </Button>
            </div>
          </CardContent>
        </Card>

        {/* Status & Actions Panel */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Wifi className="h-5 w-5" />
              Estado & Acciones
            </CardTitle>
            <CardDescription>
              Current realtime status and diagnostic actions
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <span className="text-sm font-medium">Test Status:</span>
                {getTestBadge() || <span className="text-muted-foreground text-sm">Not tested</span>}
              </div>
              
              {testResult && (
                <div className="space-y-2">
                  <div className="grid grid-cols-2 gap-2">
                    <div className="flex items-center justify-between text-xs">
                      <span>Handshake:</span>
                      {getStepBadge(testResult.handshake)}
                    </div>
                    <div className="flex items-center justify-between text-xs">
                      <span>Subscribe:</span>
                      {getStepBadge(testResult.subscribe)}
                    </div>
                    <div className="flex items-center justify-between text-xs">
                      <span>Round-trip:</span>
                      {getStepBadge(testResult.roundtrip)}
                    </div>
                    <div className="flex items-center justify-between text-xs">
                      <span>Path:</span>
                      <span className="text-muted-foreground">{testResult.path}</span>
                    </div>
                  </div>
                  
                  {(testResult.details || testResult.error) && (
                    <div className="text-xs text-muted-foreground">
                      <strong>Details:</strong> {testResult.details || testResult.error}
                    </div>
                  )}
                  
                  {/* Validation Results */}
                  {testResult.validations && (
                    <div className="mt-3 p-3 bg-muted rounded-md">
                      <h4 className="text-sm font-medium mb-2">Pre-flight Validations</h4>
                      <div className="space-y-1 text-xs">
                        <div className="flex justify-between">
                          <span>Table exists:</span>
                          <span className={testResult.validations.tableExists ? 'text-green-600' : 'text-red-600'}>
                            {testResult.validations.tableExists ? '✅' : '❌'}
                          </span>
                        </div>
                        <div className="flex justify-between">
                          <span>Publication configured:</span>
                          <span className={testResult.validations.publication ? 'text-green-600' : 'text-red-600'}>
                            {testResult.validations.publication ? '✅' : '❌'}
                          </span>
                        </div>
                        <div className="flex justify-between">
                          <span>Replica identity:</span>
                          <span className={testResult.validations.replicaIdentity ? 'text-green-600' : 'text-red-600'}>
                            {testResult.validations.replicaIdentity ? '✅' : '❌'}
                          </span>
                        </div>
                        <div className="flex justify-between">
                          <span>RLS allows access:</span>
                          <span className={testResult.validations.rlsEnabled ? 'text-green-600' : 'text-red-600'}>
                            {testResult.validations.rlsEnabled ? '✅' : '❌'}
                          </span>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              )}
            </div>

            <div className="flex flex-col gap-2">
              <Button 
                variant="outline" 
                size="sm" 
                onClick={runDualSmokeTest}
                disabled={isRunningTest || isApplying}
              >
                <Wifi className="h-4 w-4 mr-2" />
                {isRunningTest ? 'Running...' : 'Run Dual Smoke Test'}
              </Button>
              <Button variant="outline" size="sm" onClick={() => navigate('/dev/realtime-debug')}>
                <ExternalLink className="h-4 w-4 mr-2" />
                Abrir Realtime Debugger
              </Button>
              <Button variant="outline" size="sm" onClick={() => navigate('/dev/supabase-check')}>
                <ExternalLink className="h-4 w-4 mr-2" />
                Abrir Health Check
              </Button>
            </div>

            {/* Log Viewer */}
            {testLogs.length > 0 && (
              <div className="space-y-2">
                <h4 className="text-sm font-medium">Test Logs (últimos 20)</h4>
                <div className="bg-muted p-3 rounded-md text-xs font-mono max-h-32 overflow-y-auto">
                  {testLogs.map((log, index) => (
                    <div key={index}>{log}</div>
                  ))}
                </div>
              </div>
            )}

            {/* SQL Fix Checklist - show when tests fail */}
            {testResult && !testResult.ok && testResult.validations && (
              <div className="mt-4 p-3 bg-orange-50 border border-orange-200 rounded-md">
                <h4 className="text-sm font-medium text-orange-800 mb-2">SQL Fix Checklist</h4>
                <div className="space-y-2">
                  <div className="flex items-center gap-2 text-xs">
                    <Checkbox 
                      checked={testResult.validations.tableExists} 
                      disabled 
                      className="h-3 w-3"
                    />
                    <span className={testResult.validations.tableExists ? 'text-green-700' : 'text-red-700'}>
                      realtime_diag table exists
                    </span>
                  </div>
                  <div className="flex items-center gap-2 text-xs">
                    <Checkbox 
                      checked={testResult.validations.replicaIdentity} 
                      disabled 
                      className="h-3 w-3"
                    />
                    <span className={testResult.validations.replicaIdentity ? 'text-green-700' : 'text-red-700'}>
                      Replica identity FULL configured
                    </span>
                  </div>
                  <div className="flex items-center gap-2 text-xs">
                    <Checkbox 
                      checked={testResult.validations.publication} 
                      disabled 
                      className="h-3 w-3"
                    />
                    <span className={testResult.validations.publication ? 'text-green-700' : 'text-red-700'}>
                      Publication includes realtime_diag
                    </span>
                  </div>
                  <div className="flex items-center gap-2 text-xs">
                    <Checkbox 
                      checked={testResult.validations.rlsEnabled} 
                      disabled 
                      className="h-3 w-3"
                    />
                    <span className={testResult.validations.rlsEnabled ? 'text-green-700' : 'text-red-700'}>
                      RLS policy allows access
                    </span>
                  </div>
                </div>
                
                <Button 
                  onClick={runSQLFixAgain}
                  disabled={isRunningTest || isApplying}
                  variant="outline" 
                  size="sm" 
                  className="mt-3"
                >
                  {isApplying ? (
                    <>
                      <RotateCcw className="h-4 w-4 mr-2 animate-spin" />
                      Fixing...
                    </>
                  ) : (
                    <>
                      <Play className="h-4 w-4 mr-2" />
                      Run SQL Fix Again
                    </>
                  )}
                </Button>
              </div>
            )}

            {/* Log Viewer (if no checklist shown) */}
            {testLogs.length > 0 && !(testResult && !testResult.ok && testResult.validations) && (
              <div className="space-y-2">
                <h4 className="text-sm font-medium">Test Logs (últimos 20)</h4>
                <div className="bg-muted p-3 rounded-md text-xs font-mono max-h-32 overflow-y-auto">
                  {testLogs.map((log, index) => (
                    <div key={index}>{log}</div>
                  ))}
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}